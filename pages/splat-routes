{
  "title": "Splat Routes",
  "story": [
    {
      "type": "paragraph",
      "id": "91a054ca15e5650f",
      "text": "Splat routes allow you to do a catch all to catch 1 or more segments at the end of the route. If you want to have all of your routes defined from a CMS, then you can use app/Route.SPLAT_.elm. That will match any URL except for the root route (/). [https://elm-pages.com/docs/file-based-routing/#splat-routes page]"
    },
    {
      "type": "paragraph",
      "id": "413b26eb8e772b57",
      "text": "You can have any number of static segments and dynamic segments before the SPLAT_ and it will match as usual. For example, app/Route/City/SPLAT_.elm could be used to match the following:"
    },
    {
      "type": "html",
      "id": "62c7728ef7d6d69f",
      "text": "<table class=\"_9ebfe20c\"><thead><tr><th>URL</th><th>RouteParams</th></tr></thead><tbody><tr><td><code class=\"_19659af6\">/city/paris</code></td><td><code class=\"_19659af6\">{ splat = ( \"paris\", [] ) }</code></td></tr><tr><td><code class=\"_19659af6\">/city/france/paris</code></td><td><code class=\"_19659af6\">{ splat = ( \"france\", [ \"paris\" ] ) }</code></td></tr><tr><td><code class=\"_19659af6\">/city/us/california/los-angeles</code></td><td><code class=\"_19659af6\">{ splat = ( \"us\", [ \"california\", \"los-angeles\" ] ) }</code></td></tr></tbody></table>"
    },
    {
      "type": "paragraph",
      "id": "7ecc4d6e0355bab6",
      "text": "⇒ [[Optional Splat Routes]] ⇐ [[File-Based Routing]] ⇒ [[RouteParams]]"
    },
    {
      "type": "pagefold",
      "id": "12eabcc4a78026f1",
      "text": "~"
    },
    {
      "type": "graphviz",
      "id": "cce73eb4ca35af60",
      "text": "DOT FROM lambda-browsing",
      "dot": "strict digraph {rankdir=LR\n\n\n\n\n\n\nnode [style=filled fillcolor=lightyellow penwidth=3 color=black fontname=\"Helvetica\"]\n\"Splat\nRoutes\"\nnode [style=filled fillcolor=lightblue]\n\"Splat\nRoutes\" -> \"Optional\nSplat\nRoutes\"\n\"Splat\nRoutes\" -> \"File-Based\nRouting\"\n\"Splat\nRoutes\" -> \"RouteParams\"\nnode [style=filled fillcolor=white]\n\"Optional\nSplat\nRoutes\"\nnode [style=filled fillcolor=white]\n\"File-Based\nRouting\"\nnode [style=filled fillcolor=white]\n\"RouteParams\"\n\"RouteParams\" -> \"Dynamic\nSegments\"\nnode [style=filled fillcolor=white penwidth=3 color=black]\n\"Splat\nRoutes\" -> \"Optional\nSplat\nRoutes\"\n\"Splat\nRoutes\" -> \"File-Based\nRouting\"\n\"Splat\nRoutes\" -> \"RouteParams\"\nnode [style=filled fillcolor=white penwidth=1 color=black]\n\"Optional\nSplat\nRoutes\"\n\"Optional\nSplat\nRoutes\" -> \"Splat\nRoutes\"\n\"Optional\nSplat\nRoutes\" -> \"File-Based\nRouting\"\nnode [style=filled fillcolor=white penwidth=1 color=black]\n\"File-Based\nRouting\"\n\"File-Based\nRouting\" -> \"elm-pages\"\nnode [style=filled fillcolor=white penwidth=1 color=black]\n\"RouteParams\"\n\"RouteParams\" -> \"elm-pages\"\n\"RouteParams\" -> \"Elm\"\n\"RouteParams\" -> \"Dynamic\nSegments\"\nnode [style=\"filled,rounded,dotted\" fillcolor=white]\nedge [style=dotted]\n\"Splat\nRoutes\"\n\"Find\nRoute\" -> \"Splat\nRoutes\"\n\"No\nRoute\nFound\" -> \"Splat\nRoutes\"\n\"Optional\nSplat\nRoutes\" -> \"Splat\nRoutes\"\n\"2023-08-25\" -> \"Splat\nRoutes\"}",
      "svg": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\n \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\n<!-- Generated by graphviz version 8.0.5 (0)\n -->\n<!-- Pages: 1 -->\n<svg width=\"728pt\" height=\"289pt\"\n viewBox=\"0.00 0.00 727.89 289.42\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\n<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 285.42)\">\n<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-285.42 723.89,-285.42 723.89,4 -4,4\"/>\n<!-- Splat\nRoutes -->\n<g id=\"node1\" class=\"node\">\n<title>Splat\nRoutes</title>\n<ellipse fill=\"lightyellow\" stroke=\"black\" stroke-width=\"3\" cx=\"199.55\" cy=\"-163\" rx=\"42.68\" ry=\"29.42\"/>\n<text text-anchor=\"middle\" x=\"199.55\" y=\"-167.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Splat</text>\n<text text-anchor=\"middle\" x=\"199.55\" y=\"-150.4\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Routes</text>\n</g>\n<!-- Optional\nSplat\nRoutes -->\n<g id=\"node2\" class=\"node\">\n<title>Optional\nSplat\nRoutes</title>\n<ellipse fill=\"lightblue\" stroke=\"black\" stroke-width=\"3\" cx=\"348.3\" cy=\"-198\" rx=\"48.19\" ry=\"41.3\"/>\n<text text-anchor=\"middle\" x=\"348.3\" y=\"-210.6\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Optional</text>\n<text text-anchor=\"middle\" x=\"348.3\" y=\"-193.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Splat</text>\n<text text-anchor=\"middle\" x=\"348.3\" y=\"-177\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Routes</text>\n</g>\n<!-- Splat\nRoutes&#45;&gt;Optional\nSplat\nRoutes -->\n<g id=\"edge1\" class=\"edge\">\n<title>Splat\nRoutes&#45;&gt;Optional\nSplat\nRoutes</title>\n<path fill=\"none\" stroke=\"black\" d=\"M243,-166.94C258.41,-170.02 276.06,-174.1 292.4,-178.35\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"291.34,-181.96 301.91,-181.15 293.15,-175.19 291.34,-181.96\"/>\n</g>\n<!-- File&#45;Based\nRouting -->\n<g id=\"node3\" class=\"node\">\n<title>File&#45;Based\nRouting</title>\n<ellipse fill=\"lightblue\" stroke=\"black\" stroke-width=\"3\" cx=\"513.01\" cy=\"-198\" rx=\"58.63\" ry=\"29.42\"/>\n<text text-anchor=\"middle\" x=\"513.01\" y=\"-202.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">File&#45;Based</text>\n<text text-anchor=\"middle\" x=\"513.01\" y=\"-185.4\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Routing</text>\n</g>\n<!-- Splat\nRoutes&#45;&gt;File&#45;Based\nRouting -->\n<g id=\"edge2\" class=\"edge\">\n<title>Splat\nRoutes&#45;&gt;File&#45;Based\nRouting</title>\n<path fill=\"none\" stroke=\"black\" d=\"M240.96,-152.82C285.19,-143.37 357.89,-132.86 418.38,-148 435.1,-152.18 452.1,-159.98 466.94,-168.2\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"464.95,-171.66 475.36,-173.62 468.44,-165.6 464.95,-171.66\"/>\n</g>\n<!-- RouteParams -->\n<g id=\"node4\" class=\"node\">\n<title>RouteParams</title>\n<ellipse fill=\"lightblue\" stroke=\"black\" stroke-width=\"3\" cx=\"348.3\" cy=\"-74\" rx=\"70.08\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"348.3\" y=\"-69.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">RouteParams</text>\n</g>\n<!-- Splat\nRoutes&#45;&gt;RouteParams -->\n<g id=\"edge3\" class=\"edge\">\n<title>Splat\nRoutes&#45;&gt;RouteParams</title>\n<path fill=\"none\" stroke=\"black\" d=\"M232.97,-142.79C246.87,-134.17 263.31,-124.03 278.23,-115 287.99,-109.09 298.57,-102.76 308.45,-96.9\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"309.84,-99.55 316.65,-91.44 306.27,-93.53 309.84,-99.55\"/>\n</g>\n<!-- Optional\nSplat\nRoutes&#45;&gt;Splat\nRoutes -->\n<g id=\"edge5\" class=\"edge\">\n<title>Optional\nSplat\nRoutes&#45;&gt;Splat\nRoutes</title>\n<path fill=\"none\" stroke=\"black\" d=\"M299.13,-192.89C282.82,-189.5 264.62,-185.15 248.34,-180.77\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"249.53,-177.19 238.96,-177.89 247.66,-183.94 249.53,-177.19\"/>\n</g>\n<!-- Optional\nSplat\nRoutes&#45;&gt;File&#45;Based\nRouting -->\n<g id=\"edge6\" class=\"edge\">\n<title>Optional\nSplat\nRoutes&#45;&gt;File&#45;Based\nRouting</title>\n<path fill=\"none\" stroke=\"black\" d=\"M397.68,-198C411.63,-198 427.13,-198 442.1,-198\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"441.88,-201.5 451.88,-198 441.88,-194.5 441.88,-201.5\"/>\n</g>\n<!-- elm&#45;pages -->\n<g id=\"node6\" class=\"node\">\n<title>elm&#45;pages</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"663.77\" cy=\"-131\" rx=\"56.12\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"663.77\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">elm&#45;pages</text>\n</g>\n<!-- File&#45;Based\nRouting&#45;&gt;elm&#45;pages -->\n<g id=\"edge7\" class=\"edge\">\n<title>File&#45;Based\nRouting&#45;&gt;elm&#45;pages</title>\n<path fill=\"none\" stroke=\"black\" d=\"M558.64,-177.9C578.09,-169.14 600.77,-158.92 620,-150.26\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"621.31,-153.06 628.99,-145.76 618.44,-146.68 621.31,-153.06\"/>\n</g>\n<!-- Dynamic\nSegments -->\n<g id=\"node5\" class=\"node\">\n<title>Dynamic\nSegments</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-width=\"3\" cx=\"513.01\" cy=\"-121\" rx=\"55.89\" ry=\"29.42\"/>\n<text text-anchor=\"middle\" x=\"513.01\" y=\"-125.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Dynamic</text>\n<text text-anchor=\"middle\" x=\"513.01\" y=\"-108.4\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Segments</text>\n</g>\n<!-- RouteParams&#45;&gt;Dynamic\nSegments -->\n<g id=\"edge4\" class=\"edge\">\n<title>RouteParams&#45;&gt;Dynamic\nSegments</title>\n<path fill=\"none\" stroke=\"black\" d=\"M397.68,-87.97C414.75,-92.91 434.16,-98.51 452.07,-103.68\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"450.83,-107.26 461.41,-106.67 452.78,-100.53 450.83,-107.26\"/>\n</g>\n<!-- RouteParams&#45;&gt;elm&#45;pages -->\n<g id=\"edge8\" class=\"edge\">\n<title>RouteParams&#45;&gt;elm&#45;pages</title>\n<path fill=\"none\" stroke=\"black\" d=\"M417.11,-69.07C461.76,-67.68 521.09,-69.41 571.64,-83 592,-88.47 612.92,-99.08 629.58,-108.94\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"627.51,-112.38 637.86,-114.61 631.16,-106.41 627.51,-112.38\"/>\n</g>\n<!-- Elm -->\n<g id=\"node7\" class=\"node\">\n<title>Elm</title>\n<ellipse fill=\"white\" stroke=\"black\" cx=\"513.01\" cy=\"-18\" rx=\"27.67\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"513.01\" y=\"-13.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Elm</text>\n</g>\n<!-- RouteParams&#45;&gt;Elm -->\n<g id=\"edge9\" class=\"edge\">\n<title>RouteParams&#45;&gt;Elm</title>\n<path fill=\"none\" stroke=\"black\" d=\"M393.34,-58.85C419.9,-49.7 453.24,-38.23 477.81,-29.77\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"478.78,-32.8 487.09,-26.23 476.5,-26.18 478.78,-32.8\"/>\n</g>\n<!-- Find\nRoute -->\n<g id=\"node8\" class=\"node\">\n<title>Find\nRoute</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-dasharray=\"1,5\" cx=\"60.43\" cy=\"-252\" rx=\"37.73\" ry=\"29.42\"/>\n<text text-anchor=\"middle\" x=\"60.43\" y=\"-256.2\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Find</text>\n<text text-anchor=\"middle\" x=\"60.43\" y=\"-239.4\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Route</text>\n</g>\n<!-- Find\nRoute&#45;&gt;Splat\nRoutes -->\n<g id=\"edge10\" class=\"edge\">\n<title>Find\nRoute&#45;&gt;Splat\nRoutes</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M90.18,-233.34C109.83,-220.59 136.16,-203.5 157.95,-189.35\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"159.49,-191.88 165.97,-183.5 155.68,-186 159.49,-191.88\"/>\n</g>\n<!-- No\nRoute\nFound -->\n<g id=\"node9\" class=\"node\">\n<title>No\nRoute\nFound</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-dasharray=\"1,5\" cx=\"60.43\" cy=\"-163\" rx=\"39.38\" ry=\"41.3\"/>\n<text text-anchor=\"middle\" x=\"60.43\" y=\"-175.6\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">No</text>\n<text text-anchor=\"middle\" x=\"60.43\" y=\"-158.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Route</text>\n<text text-anchor=\"middle\" x=\"60.43\" y=\"-142\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Found</text>\n</g>\n<!-- No\nRoute\nFound&#45;&gt;Splat\nRoutes -->\n<g id=\"edge11\" class=\"edge\">\n<title>No\nRoute\nFound&#45;&gt;Splat\nRoutes</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M99.99,-163C113.89,-163 129.83,-163 144.79,-163\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"144.46,-166.5 154.46,-163 144.46,-159.5 144.46,-166.5\"/>\n</g>\n<!-- 2023&#45;08&#45;25 -->\n<g id=\"node10\" class=\"node\">\n<title>2023&#45;08&#45;25</title>\n<ellipse fill=\"white\" stroke=\"black\" stroke-dasharray=\"1,5\" cx=\"60.43\" cy=\"-86\" rx=\"60.43\" ry=\"18\"/>\n<text text-anchor=\"middle\" x=\"60.43\" y=\"-81.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">2023&#45;08&#45;25</text>\n</g>\n<!-- 2023&#45;08&#45;25&#45;&gt;Splat\nRoutes -->\n<g id=\"edge12\" class=\"edge\">\n<title>2023&#45;08&#45;25&#45;&gt;Splat\nRoutes</title>\n<path fill=\"none\" stroke=\"black\" stroke-dasharray=\"1,5\" d=\"M96.42,-100.87C104.56,-104.61 113.11,-108.77 120.87,-113 133.55,-119.91 146.92,-128.15 158.93,-135.92\"/>\n<polygon fill=\"black\" stroke=\"black\" points=\"156.53,-139.19 166.81,-141.75 160.36,-133.34 156.53,-139.19\"/>\n</g>\n</g>\n</svg>\n"
    },
    {
      "type": "paragraph",
      "id": "dadcbdc4d2dc7c7d",
      "text": "The *splat route convention enables you to define a route that can get anything written after the * sign as an action parameter. For example, the route “car/*imagePath” will match the http://mywebsite/#car/images/bmw. jpg URL. The action in the previous example should include an imagePath parameter. Listing 5-27 shows how to configure a route using *splat."
    },
    {
      "type": "paragraph",
      "id": "00a78127402a3b7a",
      "text": "FINK, Gil and FLATOW, Ido, 2014. Pro single page application development: using Backbone.js and ASP.NET. New York: Apress. The expert’s voice in Web development. ISBN 978-1-4302-6673-0, p. 87."
    }
  ],
  "journal": [
    {
      "type": "create",
      "item": {
        "title": "Splat Routes",
        "story": []
      },
      "date": 1692880446329
    },
    {
      "item": {
        "type": "factory",
        "id": "91a054ca15e5650f"
      },
      "id": "91a054ca15e5650f",
      "type": "add",
      "date": 1692880447498
    },
    {
      "type": "edit",
      "id": "91a054ca15e5650f",
      "item": {
        "type": "paragraph",
        "id": "91a054ca15e5650f",
        "text": "Splat routes allow you to do a catch all to catch 1 or more segments at the end of the route. If you want to have all of your routes defined from a CMS, then you can use app/Route.SPLAT_.elm. That will match any URL except for the root route (/)."
      },
      "date": 1692880449042
    },
    {
      "type": "edit",
      "id": "91a054ca15e5650f",
      "item": {
        "type": "paragraph",
        "id": "91a054ca15e5650f",
        "text": "Splat routes allow you to do a catch all to catch 1 or more segments at the end of the route. If you want to have all of your routes defined from a CMS, then you can use app/Route.SPLAT_.elm. That will match any URL except for the root route (/). [https://elm-pages.com/docs/file-based-routing/#splat-routes page]"
      },
      "date": 1692880477605
    },
    {
      "item": {
        "type": "factory",
        "id": "413b26eb8e772b57"
      },
      "id": "413b26eb8e772b57",
      "type": "add",
      "after": "91a054ca15e5650f",
      "date": 1692880583980
    },
    {
      "type": "edit",
      "id": "413b26eb8e772b57",
      "item": {
        "type": "paragraph",
        "id": "413b26eb8e772b57",
        "text": "You can have any number of static segments and dynamic segments before the SPLAT_ and it will match as usual. For"
      },
      "date": 1692880585528
    },
    {
      "type": "edit",
      "id": "413b26eb8e772b57",
      "item": {
        "type": "paragraph",
        "id": "413b26eb8e772b57",
        "text": "You can have any number of static segments and dynamic segments before the SPLAT_ and it will match as usual. "
      },
      "date": 1692880594684
    },
    {
      "item": {
        "type": "factory",
        "id": "62c7728ef7d6d69f"
      },
      "id": "62c7728ef7d6d69f",
      "type": "add",
      "after": "413b26eb8e772b57",
      "date": 1692880649635
    },
    {
      "type": "edit",
      "id": "62c7728ef7d6d69f",
      "item": {
        "type": "html",
        "id": "62c7728ef7d6d69f",
        "text": "<table class=\"_9ebfe20c\"><thead><tr><th>URL</th><th>RouteParams</th></tr></thead><tbody><tr><td><code class=\"_19659af6\">/city/paris</code></td><td><code class=\"_19659af6\">{ splat = ( \"paris\", [] ) }</code></td></tr><tr><td><code class=\"_19659af6\">/city/france/paris</code></td><td><code class=\"_19659af6\">{ splat = ( \"france\", [ \"paris\" ] ) }</code></td></tr><tr><td><code class=\"_19659af6\">/city/us/california/los-angeles</code></td><td><code class=\"_19659af6\">{ splat = ( \"us\", [ \"california\", \"los-angeles\" ] ) }</code></td></tr></tbody></table>"
      },
      "date": 1692880652051
    },
    {
      "type": "edit",
      "id": "413b26eb8e772b57",
      "item": {
        "type": "paragraph",
        "id": "413b26eb8e772b57",
        "text": "You can have any number of static segments and dynamic segments before the SPLAT_ and it will match as usual. For example, app/Route/City/SPLAT_.elm could be used to match the following:"
      },
      "date": 1692880675875
    },
    {
      "item": {
        "type": "factory",
        "id": "7ecc4d6e0355bab6"
      },
      "id": "7ecc4d6e0355bab6",
      "type": "add",
      "after": "62c7728ef7d6d69f",
      "date": 1692880727889
    },
    {
      "type": "edit",
      "id": "7ecc4d6e0355bab6",
      "item": {
        "type": "paragraph",
        "id": "7ecc4d6e0355bab6",
        "text": "⇒ [[Optional Splat Routes]]"
      },
      "date": 1692880739198
    },
    {
      "type": "edit",
      "id": "7ecc4d6e0355bab6",
      "item": {
        "type": "paragraph",
        "id": "7ecc4d6e0355bab6",
        "text": "⇒ [[Optional Splat Routes]] ⇐ [[File-Based Routing]]"
      },
      "date": 1692880759556
    },
    {
      "item": {
        "type": "factory",
        "id": "87861093e8b2f6ac"
      },
      "id": "87861093e8b2f6ac",
      "type": "add",
      "after": "7ecc4d6e0355bab6",
      "date": 1692883676151
    },
    {
      "type": "remove",
      "id": "87861093e8b2f6ac",
      "date": 1692883761381
    },
    {
      "item": {
        "type": "factory",
        "id": "12eabcc4a78026f1"
      },
      "id": "12eabcc4a78026f1",
      "type": "add",
      "after": "7ecc4d6e0355bab6",
      "date": 1692883824659
    },
    {
      "type": "edit",
      "id": "12eabcc4a78026f1",
      "item": {
        "type": "pagefold",
        "id": "12eabcc4a78026f1",
        "text": "~"
      },
      "date": 1692883827528
    },
    {
      "item": {
        "type": "factory",
        "id": "dadcbdc4d2dc7c7d"
      },
      "id": "dadcbdc4d2dc7c7d",
      "type": "add",
      "after": "12eabcc4a78026f1",
      "date": 1692883829392
    },
    {
      "type": "edit",
      "id": "dadcbdc4d2dc7c7d",
      "item": {
        "type": "paragraph",
        "id": "dadcbdc4d2dc7c7d",
        "text": "The *splat route convention enables you to define a route that can get anything written after the * sign as an action parameter. For example, the route “car/*imagePath” will match the http://mywebsite/#car/images/bmw. jpg URL. The action in the previous example should include an imagePath parameter. Listing 5-27 shows how to configure a route using *splat."
      },
      "date": 1692883831143
    },
    {
      "item": {
        "type": "factory",
        "id": "00a78127402a3b7a"
      },
      "id": "00a78127402a3b7a",
      "type": "add",
      "after": "dadcbdc4d2dc7c7d",
      "date": 1692883844743
    },
    {
      "type": "edit",
      "id": "00a78127402a3b7a",
      "item": {
        "type": "paragraph",
        "id": "00a78127402a3b7a",
        "text": "\nFINK, Gil and FLATOW, Ido, 2014. Pro single page application development: using Backbone.js and ASP.NET. . New York: Apress. The expert’s voice in Web development. ISBN 978-1-4302-6673-0. TK5105.888 .F545 2014\n"
      },
      "date": 1692883846211
    },
    {
      "type": "edit",
      "id": "00a78127402a3b7a",
      "item": {
        "type": "paragraph",
        "id": "00a78127402a3b7a",
        "text": "FINK, Gil and FLATOW, Ido, 2014. Pro single page application development: using Backbone.js and ASP.NET. . New York: Apress. The expert’s voice in Web development. ISBN 978-1-4302-6673-0, p. "
      },
      "date": 1692883856689
    },
    {
      "type": "edit",
      "id": "00a78127402a3b7a",
      "item": {
        "type": "paragraph",
        "id": "00a78127402a3b7a",
        "text": "FINK, Gil and FLATOW, Ido, 2014. Pro single page application development: using Backbone.js and ASP.NET. . New York: Apress. The expert’s voice in Web development. ISBN 978-1-4302-6673-0, p. 87."
      },
      "date": 1692883872354
    },
    {
      "type": "edit",
      "id": "00a78127402a3b7a",
      "item": {
        "type": "paragraph",
        "id": "00a78127402a3b7a",
        "text": "FINK, Gil and FLATOW, Ido, 2014. Pro single page application development: using Backbone.js and ASP.NET. New York: Apress. The expert’s voice in Web development. ISBN 978-1-4302-6673-0, p. 87."
      },
      "date": 1692883880974
    },
    {
      "item": {
        "type": "factory",
        "id": "cce73eb4ca35af60"
      },
      "id": "cce73eb4ca35af60",
      "type": "add",
      "after": "00a78127402a3b7a",
      "date": 1692884069861
    },
    {
      "type": "edit",
      "id": "cce73eb4ca35af60",
      "item": {
        "type": "graphviz",
        "id": "cce73eb4ca35af60",
        "text": "DOT FROM lambda-browsing"
      },
      "date": 1692884077073
    },
    {
      "id": "cce73eb4ca35af60",
      "type": "move",
      "order": [
        "91a054ca15e5650f",
        "413b26eb8e772b57",
        "62c7728ef7d6d69f",
        "7ecc4d6e0355bab6",
        "12eabcc4a78026f1",
        "cce73eb4ca35af60",
        "dadcbdc4d2dc7c7d",
        "00a78127402a3b7a"
      ],
      "date": 1692884112174
    },
    {
      "type": "edit",
      "id": "7ecc4d6e0355bab6",
      "item": {
        "type": "paragraph",
        "id": "7ecc4d6e0355bab6",
        "text": "⇒ [[Optional Splat Routes]] ⇐ [[File-Based Routing]] ⇒ [[RouteParams]]"
      },
      "date": 1692884337331
    },
    {
      "type": "fork",
      "site": "wiki.ralfbarkow.ch",
      "date": 1692942901366
    }
  ]
}